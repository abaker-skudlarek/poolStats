import { NgZone, ApplicationRef, InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { performance } from 'firebase/app';
import { FirebaseApp, ɵPromiseProxy } from '@angular/fire';
import * as ɵngcc0 from '@angular/core';
export declare const AUTOMATICALLY_TRACE_CORE_NG_METRICS: InjectionToken<boolean>;
export declare const INSTRUMENTATION_ENABLED: InjectionToken<boolean>;
export declare const DATA_COLLECTION_ENABLED: InjectionToken<boolean>;
export interface AngularFirePerformance extends Omit<ɵPromiseProxy<performance.Performance>, 'trace'> {
}
export declare type TraceOptions = {
    metrics?: {
        [key: string]: number;
    };
    attributes?: {
        [key: string]: string;
    };
    attribute$?: {
        [key: string]: Observable<string>;
    };
    incrementMetric$?: {
        [key: string]: Observable<number | void | null | undefined>;
    };
    metric$?: {
        [key: string]: Observable<number>;
    };
};
export declare class AngularFirePerformance {
    private zone;
    private readonly performance;
    constructor(app: FirebaseApp, automaticallyTraceCoreNgMetrics: boolean | null, instrumentationEnabled: boolean | null, dataCollectionEnabled: boolean | null, appRef: ApplicationRef, zone: NgZone, platformId: Object);
    private readonly trace$;
    readonly traceUntil: <T = any>(name: string, test: (a: T) => boolean, options?: TraceOptions & {
        orComplete?: boolean;
    }) => (source$: Observable<T>) => Observable<T>;
    readonly traceWhile: <T = any>(name: string, test: (a: T) => boolean, options?: TraceOptions & {
        orComplete?: boolean;
    }) => (source$: Observable<T>) => Observable<T>;
    readonly traceUntilComplete: <T = any>(name: string, options?: TraceOptions) => (source$: Observable<T>) => Observable<T>;
    readonly traceUntilFirst: <T = any>(name: string, options?: TraceOptions) => (source$: Observable<T>) => Observable<T>;
    readonly trace: <T = any>(name: string, options?: TraceOptions) => (source$: Observable<T>) => Observable<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFirePerformance, [null, { optional: true; }, { optional: true; }, { optional: true; }, null, null, null]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UuZC50cyIsInNvdXJjZXMiOlsicGVyZm9ybWFuY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUsIEFwcGxpY2F0aW9uUmVmLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgcGVyZm9ybWFuY2UgfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHAsIMm1UHJvbWlzZVByb3h5IH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBBVVRPTUFUSUNBTExZX1RSQUNFX0NPUkVfTkdfTUVUUklDUzogSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBJTlNUUlVNRU5UQVRJT05fRU5BQkxFRDogSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBEQVRBX0NPTExFQ1RJT05fRU5BQkxFRDogSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj47XG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2UgZXh0ZW5kcyBPbWl0PMm1UHJvbWlzZVByb3h5PHBlcmZvcm1hbmNlLlBlcmZvcm1hbmNlPiwgJ3RyYWNlJz4ge1xufVxuZXhwb3J0IGRlY2xhcmUgdHlwZSBUcmFjZU9wdGlvbnMgPSB7XG4gICAgbWV0cmljcz86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogbnVtYmVyO1xuICAgIH07XG4gICAgYXR0cmlidXRlcz86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG4gICAgYXR0cmlidXRlJD86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIH07XG4gICAgaW5jcmVtZW50TWV0cmljJD86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogT2JzZXJ2YWJsZTxudW1iZXIgfCB2b2lkIHwgbnVsbCB8IHVuZGVmaW5lZD47XG4gICAgfTtcbiAgICBtZXRyaWMkPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBPYnNlcnZhYmxlPG51bWJlcj47XG4gICAgfTtcbn07XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbmd1bGFyRmlyZVBlcmZvcm1hbmNlIHtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwZXJmb3JtYW5jZTtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEZpcmViYXNlQXBwLCBhdXRvbWF0aWNhbGx5VHJhY2VDb3JlTmdNZXRyaWNzOiBib29sZWFuIHwgbnVsbCwgaW5zdHJ1bWVudGF0aW9uRW5hYmxlZDogYm9vbGVhbiB8IG51bGwsIGRhdGFDb2xsZWN0aW9uRW5hYmxlZDogYm9vbGVhbiB8IG51bGwsIGFwcFJlZjogQXBwbGljYXRpb25SZWYsIHpvbmU6IE5nWm9uZSwgcGxhdGZvcm1JZDogT2JqZWN0KTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRyYWNlJDtcbiAgICByZWFkb25seSB0cmFjZVVudGlsOiA8VCA9IGFueT4obmFtZTogc3RyaW5nLCB0ZXN0OiAoYTogVCkgPT4gYm9vbGVhbiwgb3B0aW9ucz86IFRyYWNlT3B0aW9ucyAmIHtcbiAgICAgICAgb3JDb21wbGV0ZT86IGJvb2xlYW47XG4gICAgfSkgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG4gICAgcmVhZG9ubHkgdHJhY2VXaGlsZTogPFQgPSBhbnk+KG5hbWU6IHN0cmluZywgdGVzdDogKGE6IFQpID0+IGJvb2xlYW4sIG9wdGlvbnM/OiBUcmFjZU9wdGlvbnMgJiB7XG4gICAgICAgIG9yQ29tcGxldGU/OiBib29sZWFuO1xuICAgIH0pID0+IChzb3VyY2UkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPYnNlcnZhYmxlPFQ+O1xuICAgIHJlYWRvbmx5IHRyYWNlVW50aWxDb21wbGV0ZTogPFQgPSBhbnk+KG5hbWU6IHN0cmluZywgb3B0aW9ucz86IFRyYWNlT3B0aW9ucykgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG4gICAgcmVhZG9ubHkgdHJhY2VVbnRpbEZpcnN0OiA8VCA9IGFueT4obmFtZTogc3RyaW5nLCBvcHRpb25zPzogVHJhY2VPcHRpb25zKSA9PiAoc291cmNlJDogT2JzZXJ2YWJsZTxUPikgPT4gT2JzZXJ2YWJsZTxUPjtcbiAgICByZWFkb25seSB0cmFjZTogPFQgPSBhbnk+KG5hbWU6IHN0cmluZywgb3B0aW9ucz86IFRyYWNlT3B0aW9ucykgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG59XG4iXX0=